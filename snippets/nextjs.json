{
    "next-client-component": {
        "prefix": "next-client",
        "body": [
            "'use client';",
            "",
            "import React from 'react';",
            "",
            "export default function $1() {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Client Component"
    },
    "next-server-component": {
        "prefix": "next-server",
        "body": [
            "import React from 'react';",
            "",
            "export default async function $1() {",
            "  return (",
            "    <div>",
            "      $2",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Server Component"
    },
    "next-server-action": {
        "prefix": "next-action",
        "body": [
            "'use server';",
            "",
            "export async function $1(formData) {",
            "  // your server logic here",
            "}"
        ],
        "description": "Next.js 15 — Server Action (used in forms or server logic)"
    },
    "next-page-component": {
        "prefix": "next-page",
        "body": [
            "import React from 'react';",
            "",
            "export default function Page() {",
            "  return (",
            "    <div>",
            "      $1",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — Page Component (App Router)"
    },
    "next-loading": {
        "prefix": "next-loading",
        "body": [
            "export default function Loading() {",
            "  return <div>Loading...</div>;",
            "}"
        ],
        "description": "Next.js 15 — loading.tsx file (used for suspense fallback)"
    },
    "next-error": {
        "prefix": "next-error",
        "body": [
            "'use client';",
            "",
            "export default function Error({ error, reset }) {",
            "  return (",
            "    <div>",
            "      <h2>Something went wrong!</h2>",
            "      <button onClick={() => reset()}>Try again</button>",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "Next.js 15 — error.tsx file (client component for handling errors)"
    },
    "next-route-handler": {
        "prefix": "next-handler",
        "body": [
            "import { NextResponse } from 'next/server';",
            "",
            "export async function GET(request) {",
            "  return NextResponse.json({ message: 'Hello from API' });",
            "}",
            "",
            "export async function POST(request) {",
            "  const body = await request.json();",
            "  return NextResponse.json({ received: body });",
            "}"
        ],
        "description": "Next.js 15 — Route Handler API (app/api/xyz/route.ts)"
    },
    "next-middleware": {
        "prefix": "next-middleware",
        "body": [
            "import { NextResponse } from 'next/server';",
            "import type { NextRequest } from 'next/server';",
            "",
            "export function middleware(request: NextRequest) {",
            "  const isLoggedIn = request.cookies.get('token');",
            "  if (!isLoggedIn) {",
            "    return NextResponse.redirect(new URL('/login', request.url));",
            "  }",
            "  return NextResponse.next();",
            "}",
            "",
            "export const config = {",
            "  matcher: ['/dashboard/:path*']",
            "};"
        ],
        "description": "Next.js 15 — Middleware (edge functions with route matcher)"
    },
    "next-userouter": {
        "prefix": "next-router",
        "body": [
            "'use client';",
            "",
            "import { useRouter } from 'next/navigation';",
            "",
            "const router = useRouter();",
            "// router.push('/dashboard');"
        ],
        "description": "Next.js 15 — useRouter() (for client-side navigation)"
    },
    "next-usepathname": {
        "prefix": "next-pathname",
        "body": [
            "'use client';",
            "",
            "import { usePathname } from 'next/navigation';",
            "",
            "const pathname = usePathname();",
            "// console.log(pathname);"
        ],
        "description": "Next.js 15 — usePathname() (get current URL path)"
    },
    "next-usesearchparams": {
        "prefix": "next-searchparams",
        "body": [
            "'use client';",
            "",
            "import { useSearchParams } from 'next/navigation';",
            "",
            "const searchParams = useSearchParams();",
            "const value = searchParams.get('$1');"
        ],
        "description": "Next.js 15 — useSearchParams() (query string parsing)"
    },
    "next-useparams": {
        "prefix": "next-params",
        "body": [
            "'use client';",
            "",
            "import { useParams } from 'next/navigation';",
            "",
            "const params = useParams();",
            "// console.log(params);"
        ],
        "description": "Next.js 15 — useParams() (dynamic route segments)"
    },
    "next-uselayoutsegments": {
        "prefix": "next-layoutsegments",
        "body": [
            "'use client';",
            "",
            "import { useSelectedLayoutSegments } from 'next/navigation';",
            "",
            "const segments = useSelectedLayoutSegments();",
            "// console.log(segments);"
        ],
        "description": "Next.js 15 — useSelectedLayoutSegments() (layout nesting)"
    },
    "next-uselayoutsegment": {
        "prefix": "next-layoutsegment",
        "body": [
            "'use client';",
            "",
            "import { useSelectedLayoutSegment } from 'next/navigation';",
            "",
            "const segment = useSelectedLayoutSegment();",
            "// console.log(segment);"
        ],
        "description": "Next.js 15 — useSelectedLayoutSegment() (current segment)"
    }
    ,
    "next-layout": {
        "prefix": "next-layout",
        "body": [
            "import React from 'react';",
            "",
            "export default function RootLayout({ children }) {",
            "    return (",
            "        <html lang=\"en\">",
            "            <body>",
            "                {children}",
            "            </body>",
            "        </html>",
            "    );",
            "}"
        ],
        "description": "Next.js 15 — layout.tsx root layout"
    },
    "next-notfound": {
        "prefix": "next-notfound",
        "body": [
            "export default function NotFound() {",
            "    return (",
            "        <div>",
            "            <h2>Not Found</h2>",
            "            <p>Could not find requested resource</p>",
            "        </div>",
            "    );",
            "}"
        ],
        "description": "Next.js 15 — not-found.tsx page"
    },
    "next-metadata": {
        "prefix": "next-metadata",
        "body": [
            "import type { Metadata } from 'next';",
            "",
            "export const metadata: Metadata = {",
            "    title: '$1',",
            "    description: '$2'",
            "};"
        ],
        "description": "Next.js 15 — export page metadata (TypeScript)"
    },
    "next-revalidate": {
        "prefix": "next-revalidate",
        "body": [
            "export const revalidate = $1; // seconds"
        ],
        "description": "Next.js 15 — route segment revalidation interval"
    },
    "next-link": {
        "prefix": "next-link",
        "body": [
            "import Link from 'next/link';",
            "",
            "<Link href=\"$1\">$2</Link>"
        ],
        "description": "Next.js 15 — Link component usage"
    },
    "next-image": {
        "prefix": "next-image",
        "body": [
            "import Image from 'next/image';",
            "",
            "<Image src=\"$1\" alt=\"$2\" width={$3} height={$4} />"
        ],
        "description": "Next.js 15 — Image component usage"
    },
    "next-dynamic": {
        "prefix": "next-dynamic",
        "body": [
            "'use client';",
            "",
            "import dynamic from 'next/dynamic';",
            "",
            "const $1 = dynamic(() => import('$2'), {",
            "    ssr: false",
            "});"
        ],
        "description": "Next.js 15 — dynamic() client-side only import"
    },
    "next-redirect": {
        "prefix": "next-redirect",
        "body": [
            "import { redirect, notFound } from 'next/navigation';",
            "",
            "// redirect('/login');",
            "// notFound();"
        ],
        "description": "Next.js 15 — redirect and notFound utilities"
    },
    "next-fetch-cache": {
        "prefix": "next-fetch",
        "body": [
            "const res = await fetch('$1', {",
            "    cache: '$2', // 'force-cache' | 'no-store'",
            "    next: { revalidate: $3, tags: ['$4'] }",
            "});",
            "const data = await res.json();"
        ],
        "description": "Next.js 15 — fetch with cache and revalidate options"
    }
    ,
    "next-dynamic-segment-config": {
        "prefix": "next-segment",
        "body": [
            "export const dynamic = '$1'; // 'auto' | 'force-dynamic' | 'error' | 'force-static'",
            "export const revalidate = $2; // number | false",
            "export const fetchCache = '$3'; // 'auto' | 'default-cache' | 'only-cache' | 'force-cache' | 'force-no-store'",
            "export const runtime = '$4'; // 'nodejs' | 'edge'",
            "export const preferredRegion = ['$5']; // e.g. 'iad1' | 'pdx1'"
        ],
        "description": "Next.js 15 — Route segment exports (dynamic, revalidate, fetchCache, runtime, preferredRegion)"
    },
    "next-generate-metadata": {
        "prefix": "next-generate-metadata",
        "body": [
            "import type { Metadata } from 'next';",
            "",
            "export async function generateMetadata(): Promise<Metadata> {",
            "    // fetch data for meta",
            "    return {",
            "        title: '$1',",
            "        description: '$2'",
            "    };",
            "}"
        ],
        "description": "Next.js 15 — generateMetadata function"
    },
    "next-generate-static-params": {
        "prefix": "next-generate-params",
        "body": [
            "export async function generateStaticParams() {",
            "    // return params for static generation",
            "    return [",
            "        { slug: '$1' }",
            "    ];",
            "}"
        ],
        "description": "Next.js 15 — generateStaticParams for dynamic routes"
    },
    "next-server-utils": {
        "prefix": "next-server-utils",
        "body": [
            "import { revalidatePath, revalidateTag } from 'next/cache';",
            "import { cookies, headers } from 'next/headers';",
            "",
            "// await revalidatePath('/dashboard');",
            "// await revalidateTag('posts');",
            "",
            "const cookieStore = cookies();",
            "const token = cookieStore.get('token');",
            "",
            "const hdrs = headers();",
            "const userAgent = hdrs.get('user-agent');"
        ],
        "description": "Next.js 15 — Server utilities: revalidatePath/Tag, cookies, headers"
    },
    "next-script": {
        "prefix": "next-script",
        "body": [
            "import Script from 'next/script';",
            "",
            "<Script",
            "    src=\"$1\"",
            "    strategy=\"afterInteractive\"",
            "    onLoad={() => console.log('loaded')}",
            "/>"
        ],
        "description": "Next.js 15 — Script component with loading strategy"
    },
    "next-og-image": {
        "prefix": "next-og-image",
        "body": [
            "import { ImageResponse } from 'next/og';",
            "",
            "export const runtime = 'edge';",
            "",
            "export async function GET() {",
            "    return new ImageResponse(",
            "        (<div style={{ fontSize: 48 }}>OG</div>),",
            "        { width: 1200, height: 630 }",
            "    );",
            "}"
        ],
        "description": "Next.js 15 — OG image route (app/og/route.ts)"
    }
}